import streamlit as st
from main import solve_problem

st.set_page_config(page_title="AI Project Assistant", layout="wide")
st.title("🧠 IT Project Team Simulator")

# Input field
problem = st.text_area("📝 Describe your IT project/problem/task:", height=200)

# Agent selection
agent_option = st.radio(
    "👥 Choose agent(s) to simulate:",
    ("Business Analyst", "Designer", "Developer", "Tester", "All Agents")
)

agent_map = {
    "Business Analyst": ["business_analyst"],
    "Designer": ["designer"],
    "Developer": ["developer"],
    "Tester": ["tester"],
    "All Agents": ["business_analyst", "designer", "developer", "tester"]
}
selected_roles = agent_map[agent_option]

if st.button("🚀 Run Simulation"):
    if not problem.strip():
        st.warning("⚠️ Please enter a project or task description.")
    else:
        with st.spinner("🤖 Agents are working together..."):
            result = solve_problem(problem, selected_roles)

            st.success("✅ Output Generated!")
            st.markdown("### 📌 Team Output")

            if isinstance(result, dict):
                for key, val in result.items():
                    st.subheader(f"🔹 {key}")
                    if isinstance(val, dict):
                        st.markdown(f"**Agent:** `{val.get('agent', 'Unknown')}`")
                        st.code(val.get('output', 'No output'), language='markdown')
                    else:
                        st.markdown(val)
            else:
                st.code(result, language='markdown')









# import streamlit as st
# from main import solve_problem

# # Streamlit app title
# st.set_page_config(page_title="IT Project Assistant", layout="wide")
# st.title("💼 IT Project - AI Team Assistant")

# # Input area
# problem = st.text_area("📝 Describe your IT project/task/problem below:", height=200)

# # Agent selection
# agent_option = st.radio(
#     "👥 Which agent(s) would you like to involve?",
#     ("Business Analyst", "Designer", "Developer", "Tester", "All Agents")
# )

# # Map selection
# agent_map = {
#     "Business Analyst": ["business_analyst"],
#     "Designer": ["designer"],
#     "Developer": ["developer"],
#     "Tester": ["tester"],
#     "All Agents": ["business_analyst", "designer", "developer", "tester"]
# }

# selected_agents = agent_map[agent_option]

# # Solve button
# if st.button("🚀 Run Team Simulation"):
#     if not problem.strip():
#         st.warning("⚠️ Please enter a problem or project to simulate.")
#     else:
#         with st.spinner("💡 Agents are collaborating..."):
#             result = solve_problem(problem, selected_agents)
#             st.success("🎉 Solution generated by the team!")
#             st.markdown("## 📌 Team Output")
            
#             if isinstance(result, dict):
#                 for section, content in result.items():
#                     st.subheader(f"🔹 {section}")
#                     if isinstance(content, dict):
#                         st.markdown(f"**Agent:** `{content.get('agent', 'Unknown')}`")
#                         st.markdown("**Response:**")
#                         st.code(content.get("output", "No output"), language='markdown')
#                     else:
#                         st.markdown(content)
#             else:
#                 st.code(result, language='markdown')
